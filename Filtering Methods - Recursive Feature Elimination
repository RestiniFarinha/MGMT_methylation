import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import RFECV
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline

# Load the dataset
data = pd.read_excel('data_after_smote_combined_22dec.xlsx')

# Remove the 'ID' column
data = data.drop(columns=['ID'], errors='ignore')

# Prepare explanatory variables (X) and the target variable (y)
X = data.drop('TARGET', axis=1)
y = data['TARGET']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Data normalization
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create the RFE model with cross-validation
model = LogisticRegression(solver='liblinear')
rfecv = RFECV(estimator=model, step=1, cv=5, scoring='accuracy')

# Fit the RFE
rfecv.fit(X_train_scaled, y_train)

# Check which features were selected
selected_features = X.columns[rfecv.support_]

# Results
print("Optimal number of features: %d" % rfecv.n_features_)
print('Selected features:', selected_features)

# Plot the number of features vs. cross-validation score
plt.figure(figsize=(10, 6))
plt.xlabel("Number of features selected")
plt.ylabel("Cross-validation score (nb of correct classifications)")
plt.plot(range(1, len(rfecv.cv_results_['mean_test_score']) + 1), rfecv.cv_results_['mean_test_score'])
plt.show()
